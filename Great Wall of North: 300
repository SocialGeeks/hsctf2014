import numpy
import networkx as nx

guard_data = numpy.loadtxt(open("C:\VMs\shared\guards\GreatWallOfNorthCase.txt","rb"),dtype=int)

G=nx.DiGraph()
G.add_weighted_edges_from(guard_data)

print nx.dijkstra_path(G,0,31078657)

is close. It returns the weighted path of: 
start	end	cost
0	1613202	1318651
1613202	5798268	1665086
5798268	12884135	7172040
12884135	31078657	1260270

For a total cost of: 11416047 But it's not the flag. =(

Other notes:
   start	end			cost	range	efficiency
       0	17287971	1901970	17287971	9.089507721

17287971	23685842	2226224	6397871	2.873866691

23685842	27265919	2417425	3580077	1.480946462

27265919	27370295	66379975	104376	0.001572402

27370295	29973221	70759920	2602926	0.036785316

29973221	31078657	11671862	1105436	0.094709482

G.add_edge(17287971,23685842,weight=2226224)
G.add_edge(23685842,27265919,weight=2417425)
G.add_edge(27265919,27370295,weight=66379975)
G.add_edge(27370295,29973221,weight=70759920)
G.add_edge(29973221,31078657,weight=11671862)

0	1613202	1318651
1613202	14539364	1679472

0, 1613202, 14539364, 2639988, 3394875, 31078657
0, 1613202, 14539364, 2639988, 3394875, 31078657
0, 1613202, 14539364, 2639988, 3394875, 31078657

31078657
2533368
20937859
22421870
11662951
7151538

[0, 
1613202, 
5798268, 
12884135, 
31078657]

DiGraph - Dijkstra
start	end	cost
0	1613202	1318651
1613202	5798268	1665086
5798268	12884135	7172040
12884135	31078657	1260270

DiGraph - shortest_path
0, 2370689, 31078657
0	2370689	71024147
2370689	31078657	86378903
11416047
157403050

Write-up at: http://compete.hsctf.com/book/great_wall_of_north/README.html

snip-

Great Wall of North

There are two feasible solutions for this problem.
Solution 1 - Abstraction to Shortest Path

Take every integer time between 0 and K and represent that as a vertex. Attach edges in the graph based on the given intervals, with edge weights as the weights of the intervals. For example, if N = 6 and K = 4, and the applicants, in the form (s, f, p), are

(0, 1, 2) (1, 2, 4) (0, 3, 1) (2, 3, 3) (3, 4, 2) (2, 4, 5)

then this would be the graph:

Running any shortest path algorithm (Dijkstra's for example) for a path from 0 to K on the actual case would give the answer of 10271912
Solution 2 - Dynamic Programming

Sort all the intervals by finish time first. Then, you can apply the following recurrence relation:

Here is some java code that applies that relation:

public GreatWallofNorth(int N, int K, int[] s, int[] f, int[] p) {

    int[][] times = new int[s.length][3];
    for(int i = 0; i < s.length; i++) {
        times[i][0] = s[i];
        times[i][1] = f[i];
        times[i][2] = p[i];
    }

    System.out.println(dynamicProgram(N, K, times));
}

public int dynamicProgram(int N, int K, int[][] times) {

    int[] P = new int[K + 1];
    Arrays.sort(times, new Comparator<int[]>() {
        public int compare(int[] A, int[] B) {
            return A[1] - B[1];
        }
    });
    P[0] = 0;
    for(int i = 1; i < K + 1; i++) {
        P[i] = Integer.MAX_VALUE;
    }

    for(int i = 0; i < times.length; i++) {
        int minVal = Integer.MAX_VALUE;
        for(int j = 0; j < times.length; j++) {
            if(times[j][1] == times[i][1]) {
                if(P[times[j][0]] + times[j][2] < 0) {
                    continue;
                }
                minVal = Math.min(minVal, P[times[j][0]] + times[j][2]);
            }
        }

        P[times[i][1]] = minVal;
    }

    return P[K];
}

**********
Asked in chat:
<mib_txwzax>: Can anybody give me a clue why my Dijkstra gave a different length than the flag? http://pastebin.com/Ps0gAfSF
<_alex>: are you sure you linked the guards together properly?
<VeniVidiVici42>: what are you using djikstra for
<_alex>: it looks like he used the price to weight a graph across the connected segments
<_alex>: I'm not seeing an immediate problem...
<mib_txwzax>: I tried dijsktra, bellman-ford, and FW. They all returned the same length/added price of all the guards. But it didn't match the flag
<VeniVidiVici42>: for what problem
<mib_txwzax>: GreatWallGuards
<VeniVidiVici42>: are you overflowing in intermediate steps
<_alex>: I got the right flag but I did it a different way
<_alex>: probably not veni, the library is doing most of the work
<_alex>: I'm trying to think of whether or not the rule that you can't overlap could be affecting this
<_alex>: was your price too low?
<_alex>: I'm picturing that it might be that it back-tracked to get a lower price which violated the problem semantics
<VeniVidiVici42>: well wait a second
<VeniVidiVici42>: if you're using djikstra
<VeniVidiVici42>: you're not doing it right
<VeniVidiVici42>: like
<VeniVidiVici42>: you can't go backwards
<VeniVidiVici42>: guards from [1,5] [5,6] [6,2] [2,31078657] don't work
<VeniVidiVici42>: for example
<mib_txwzax>: The write-up says Dijkstra should work
<_alex>: yeah that's what I was saying
<_alex>: except his price is too high not too low
<ben_edelman>: Goodnight. Once more, upvote us on https://news.ycombinator.com/item?id=7798885.
<VeniVidiVici42>: djikstra should work if you consier the edges to be directed
<mib_txwzax>: yes, the graph was directed from DiGraph
<_alex>: ben I have a solution for north that isn't listed
<_alex>: where do I send that to
<_alex>: hmm I can't think of any reason your code should fail in a way that gives a higher price
<mib_txwzax>: The path it came back with was: [0, 1613202, 5798268, 12884135, 31078657] which doesn't overlap, and I sum'ed the price of each guard by hand and it came out to the same value.
<_alex>: lemme check what my path is
<mib_xzk30o>: sorry the limitation was
<mib_xzk30o>: array list
<_alex>: well that's awkward
<_alex>: my method doesn't actually allow easily finding the path
<_alex>: your price never showed up as a candidate in mine
<mib_txwzax>: I guess the networkx lib didn't do it right. Thanks _alex
<_alex>: that's weird though, I don't see how that would fail
<_alex>: presumably the library is correct... I assume it's a common library (I don't use python much)
<mib_txwzax>: networkx seems to be popular with production code, so I'm puzzled how it wouldn't do it properly.
<_alex>: it looks like it might have found the shortest path in terms of node count
<_alex>: actually
<mib_txwzax>: nope, I experimented with that too. There is a 2-step path that it found with another algo
<_alex>: the documentation says the weights are distances not rewards so I really have no idea
<_alex>: if you're sure you had all the edges in the file that looks like a bug report to me
<mib_txwzax>: thx _alex
<ErnestChiu>: @_alex send it to jacob@hsctf.com
<ErnestChiu>: Any comments on the writeups?
